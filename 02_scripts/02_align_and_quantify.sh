#!/bin/bash

# 02_align_and_quantify.sh
#
# This script performs three main functions:
# 0. Downloads reference files and builds a STAR index if one is not found.
# 1. Aligns the trimmed FASTQ files to a reference genome using STAR.
# 2. Quantifies the number of reads mapping to genes using featureCounts.
#
# It assumes the QC and trimming script has been run successfully.

# --- Configuration ---
# Stop script on any error
set -e

# Define project base directory relative to the script location
BASE_DIR="/scratch/scholar/aseethar/20250915_AirwayStudy_RNAseq"

# Input/Output Directories
# comment
TRIMMED_READS_DIR="${BASE_DIR}/01_data/processed/trimmed_reads"
ALIGNMENTS_DIR="${BASE_DIR}/03_analysis/alignments"
COUNTS_DIR="${BASE_DIR}/03_analysis/counts"
LOG_DIR="${BASE_DIR}/99_logs"
REFS_DIR="${BASE_DIR}/00_references"

# Reference Genome and Annotation (GENCODE Release 49, GRCh38)
GENOME_FASTA_URL="https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_49/GRCh38.primary_assembly.genome.fa.gz"
GTF_URL="https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_49/gencode.v49.primary_assembly.annotation.gtf.gz"

GENOME_FASTA="${REFS_DIR}/GRCh38.primary_assembly.genome.fa"
GTF_FILE="${REFS_DIR}/gencode.v49.primary_assembly.annotation.gtf"
STAR_INDEX="${REFS_DIR}/star_index_gencode_v49"

# Number of threads to use
THREADS=32
# For STAR index generation: read length - 1. This experiment used 75bp reads.
SJDB_OVERHANG=74

# --- Setup ---
# Create output directories if they don't exist
mkdir -p "$ALIGNMENTS_DIR"
mkdir -p "$COUNTS_DIR"
mkdir -p "$LOG_DIR"
mkdir -p "$REFS_DIR"

echo "Starting Alignment and Quantification Pipeline..."
echo "Project Base Directory: ${BASE_DIR}"
echo "------------------------------------"

# --- Step 0: Prepare Reference Genome and STAR Index ---
# load modules
ml --force purge
ml biocontainers
ml star

echo "Step 0: Checking for STAR Index..."
if [ ! -d "$STAR_INDEX" ]; then
    echo "STAR index not found. Downloading references and building index..."

    # Download Genome FASTA if it doesn't exist
    if [ ! -f "${GENOME_FASTA}" ]; then
        echo "Downloading Genome FASTA from ${GENOME_FASTA_URL}..."
        wget -O "${GENOME_FASTA}.gz" "$GENOME_FASTA_URL"
        echo "Decompressing Genome FASTA..."
        gunzip "${GENOME_FASTA}.gz"
    else
        echo "Genome FASTA already exists."
    fi

    # Download GTF if it doesn't exist
    if [ ! -f "${GTF_FILE}" ]; then
        echo "Downloading Annotation GTF from ${GTF_URL}..."
        wget -O "${GTF_FILE}.gz" "$GTF_URL"
        echo "Decompressing Annotation GTF..."
        gunzip "${GTF_FILE}.gz"
    else
        echo "Annotation GTF already exists."
    fi

    echo "Building STAR index... This may take a while and require significant memory."
    mkdir -p "$STAR_INDEX"
    STAR --runThreadN "$THREADS" \
         --runMode genomeGenerate \
         --genomeDir "$STAR_INDEX" \
         --genomeFastaFiles "$GENOME_FASTA" \
         --sjdbGTFfile "$GTF_FILE" \
         --sjdbOverhang "$SJDB_OVERHANG"

    echo "STAR index built successfully."
else
    echo "STAR index found in ${STAR_INDEX}. Skipping build."
fi
echo "------------------------------------"


# --- Step 1: Run STAR Aligner ---
echo "Step 1: Running STAR alignment..."

for r1_paired_file in "$TRIMMED_READS_DIR"/*_1_paired.fastq.gz; do
    # Derive the R2 filename and the base sample name from the R1 file
    r2_paired_file="${r1_paired_file/_1_paired.fastq.gz/_2_paired.fastq.gz}"
    sample_base=$(basename "$r1_paired_file" _1_paired.fastq.gz)
    
    echo "Aligning sample: ${sample_base}"

    # Define the output directory for this sample
    sample_out_dir="${ALIGNMENTS_DIR}/${sample_base}"
    mkdir -p "$sample_out_dir"

    # STAR alignment command
    STAR --runThreadN "$THREADS" \
         --genomeDir "$STAR_INDEX" \
         --readFilesIn "$r1_paired_file" "$r2_paired_file" \
         --readFilesCommand zcat \
         --outFileNamePrefix "${sample_out_dir}/${sample_base}_" \
         --outSAMtype BAM SortedByCoordinate \
         --outSAMunmapped Within \
         --outSAMattributes Standard

done

echo "STAR alignment complete. BAM files are in ${ALIGNMENTS_DIR}"
echo "------------------------------------"


# --- Step 2: Run featureCounts ---
# load modules
ml --force purge
ml biocontainers
ml subread


echo "Step 2: Running featureCounts for read quantification..."

# Find all the sorted BAM files generated by STAR
BAM_FILES=$(find "$ALIGNMENTS_DIR" -name "*_Aligned.sortedByCoord.out.bam")

featureCounts -T "$THREADS" \
              -p \
              -t exon \
              -g gene_id \
              -a "$GTF_FILE" \
              -o "${COUNTS_DIR}/raw_gene_counts.txt" \
              $BAM_FILES \
              2> "${LOG_DIR}/featureCounts.log"

echo "featureCounts quantification complete. Count matrix is in ${COUNTS_DIR}"
echo "------------------------------------"

echo "Pipeline finished successfully."

